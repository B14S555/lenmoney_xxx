import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import kb
import bd.reqest as db

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddRecord(StatesGroup):
    amount = State()
    description = State()
    type = State()

# –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç Telegram
async def safe_answer(callback: CallbackQuery):
    try:
        await callback.answer()
    except:
        pass

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
def log_action(user, action: str):
    print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üë§ {user.full_name} ({user.id}): {action}")

# === /start ===
@router.message(CommandStart())
async def start(message: Message):
    log_action(message.from_user, "–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üêº –Ø ‚Äî MoneyPanda, —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∞–Ω–¥–∞ üíö  ", reply_markup=kb.main_menu)

# === –†–∞—Å—Ö–æ–¥ ===
@router.callback_query(F.data == "add_expense")
async def add_expense(callback: CallbackQuery, state: FSMContext):
    asyncio.create_task(safe_answer(callback))
    log_action(callback.from_user, "–Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞")
    await state.set_state(AddRecord.amount)
    await state.update_data(type="expense")
    await callback.message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=kb.exit)

# === –ü—Ä–∏–±—ã–ª—å ===
@router.callback_query(F.data == "add_profit")
async def add_profit(callback: CallbackQuery, state: FSMContext):
    asyncio.create_task(safe_answer(callback))
    log_action(callback.from_user, "–Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏")
    await state.set_state(AddRecord.amount)
    await state.update_data(type="profit")
    await callback.message.answer("üìà –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏–±—ã–ª–∏:", reply_markup=kb.exit)

# === –í–≤–æ–¥ —Å—É–º–º—ã ===
@router.message(AddRecord.amount)
async def enter_sum(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        await state.update_data(amount=amount)
        await state.set_state(AddRecord.description)
        log_action(message.from_user, f"–≤–≤–µ–ª —Å—É–º–º—É: {amount}")
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=kb.exit)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 250")

# === –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–ø–∏—Å—å ===
@router.message(AddRecord.description)
async def enter_description(message: Message, state: FSMContext):
    data = await state.get_data()
    data["description"] = message.text

    await db.add_record(message.from_user.id, data)
    emoji = "üìâ" if data["type"] == "expense" else "üìà"
    log_action(message.from_user, f"–¥–æ–±–∞–≤–∏–ª –∑–∞–ø–∏—Å—å: {emoji} {data['amount']} –≥—Ä–Ω ‚Äî {data['description']}")

    await message.answer(
        f"{emoji} –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüí∞ {data['amount']} –≥—Ä–Ω\nüìù {data['description']}",
        reply_markup=kb.main_menu
    )
    await state.clear()

# === –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===
@router.callback_query(F.data == "stats")
async def stats(callback: CallbackQuery):
    asyncio.create_task(safe_answer(callback))
    log_action(callback.from_user, "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    text = await db.get_last_records(callback.from_user.id)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb.main_menu)

# === –ë–∞–ª–∞–Ω—Å ===
@router.callback_query(F.data == "balance")
async def balance(callback: CallbackQuery):
    asyncio.create_task(safe_answer(callback))
    log_action(callback.from_user, "–∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å")
    text = await db.get_statistics(callback.from_user.id)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb.main_menu)

# === –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç ===
@router.callback_query(F.data == "monthly_report")
async def monthly_report(callback: CallbackQuery):
    asyncio.create_task(safe_answer(callback))
    log_action(callback.from_user, "–∑–∞–ø—Ä–æ—Å–∏–ª –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç")
    text = await db.get_monthly_report(callback.from_user.id)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb.main_menu)

# === –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é ===
@router.callback_query(F.data == "exit")
async def exit_menu(callback: CallbackQuery, state: FSMContext):
    asyncio.create_task(safe_answer(callback))
    log_action(callback.from_user, "–≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é")
    await state.clear()
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main_menu)
